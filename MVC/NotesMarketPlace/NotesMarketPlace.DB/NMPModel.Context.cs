//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotesMarketPlace.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NotesMarketPlaceEntities : DbContext
    {
        public NotesMarketPlaceEntities()
            : base("name=NotesMarketPlaceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Downloads> Downloads { get; set; }
        public virtual DbSet<NoteCategories> NoteCategories { get; set; }
        public virtual DbSet<NoteTypes> NoteTypes { get; set; }
        public virtual DbSet<ReferenceData> ReferenceData { get; set; }
        public virtual DbSet<SellerNotes> SellerNotes { get; set; }
        public virtual DbSet<SellerNotesAttachements> SellerNotesAttachements { get; set; }
        public virtual DbSet<SellerNotesReportedIssues> SellerNotesReportedIssues { get; set; }
        public virtual DbSet<SellerNotesReviews> SellerNotesReviews { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SystemConfigurations> SystemConfigurations { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_Users_SelectAll_Result> SP_Users_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_SelectAll_Result>("SP_Users_SelectAll");
        }
    
        public virtual ObjectResult<SP_Notes_Search_Result> SP_Notes_Search(string notesTitle, Nullable<int> category, Nullable<int> noteType, Nullable<int> university, Nullable<int> course, Nullable<int> country, Nullable<int> rating)
        {
            var notesTitleParameter = notesTitle != null ?
                new ObjectParameter("NotesTitle", notesTitle) :
                new ObjectParameter("NotesTitle", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var noteTypeParameter = noteType.HasValue ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(int));
    
            var universityParameter = university.HasValue ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Notes_Search_Result>("SP_Notes_Search", notesTitleParameter, categoryParameter, noteTypeParameter, universityParameter, courseParameter, countryParameter, ratingParameter);
        }
    
        public virtual int SP_Users_DeleteByPK(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_DeleteByPK", userIDParameter);
        }
    
        public virtual ObjectResult<SellerNotes> SearchNotes(string notesTitle, Nullable<int> category, Nullable<int> noteType, Nullable<int> university, Nullable<int> course, Nullable<int> country, Nullable<int> rating)
        {
            var notesTitleParameter = notesTitle != null ?
                new ObjectParameter("NotesTitle", notesTitle) :
                new ObjectParameter("NotesTitle", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var noteTypeParameter = noteType.HasValue ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(int));
    
            var universityParameter = university.HasValue ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SellerNotes>("SearchNotes", notesTitleParameter, categoryParameter, noteTypeParameter, universityParameter, courseParameter, countryParameter, ratingParameter);
        }
    
        public virtual ObjectResult<SellerNotes> SearchNotes(string notesTitle, Nullable<int> category, Nullable<int> noteType, Nullable<int> university, Nullable<int> course, Nullable<int> country, Nullable<int> rating, MergeOption mergeOption)
        {
            var notesTitleParameter = notesTitle != null ?
                new ObjectParameter("NotesTitle", notesTitle) :
                new ObjectParameter("NotesTitle", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var noteTypeParameter = noteType.HasValue ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(int));
    
            var universityParameter = university.HasValue ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SellerNotes>("SearchNotes", mergeOption, notesTitleParameter, categoryParameter, noteTypeParameter, universityParameter, courseParameter, countryParameter, ratingParameter);
        }
    }
}
