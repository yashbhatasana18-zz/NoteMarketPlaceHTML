
@{
    ViewBag.Title = "EditNotes";
    Layout = "~/Views/Shared/_ClientLayout.cshtml";
}

@model NotesMarketPlace.Models.EditNotesModel

@section CustomStyle
{
    <style>
        label {
            margin-bottom: 10px !important;
            font-family: 'Open Sans', sans-serif;
            font-size: 16px;
            font-weight: 400;
            line-height: 20px;
            color: #333333;
        }

        .form-group {
            margin-bottom: 30px !important;
        }

        textarea {
            border: 1px solid #d1d1d1;
            width: 1440px;
            height: 153px !important;
            border-radius: 3px;
        }

        #btnSubmit {
            margin-left: 15px;
        }

        .radio1 {
            display: inline-flex;
            position: relative;
            padding: 0 30px 0 50px;
            margin-bottom: 0 !important;
            cursor: pointer;
            font-size: 22px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

            .radio1 input {
                position: absolute;
                opacity: 0;
                cursor: pointer;
            }

            .radio1 .label-2 {
                font-family: "Open Sans", sans-serif;
                font-size: 16px;
                font-weight: 400;
                line-height: 20px;
                color: #333333;
                position: relative;
                top: 11px;
            }

        /* Create a custom radio button */
        .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 42px;
            width: 42px;
            background-color: #fff;
            border: 1px solid #d1d1d1;
            border-radius: 50%;
        }

        /* When the radio button is checked, add a blue background */
        .radio1 input:checked ~ .checkmark {
            background-color: #fff;
            border: 1px solid #6255a5;
        }

        /* Create the indicator (the dot/circle - hidden when not checked) */
        .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        /* Show the indicator (dot/circle) when checked */
        .radio1 input:checked ~ .checkmark:after {
            display: block;
        }

        /* Style the indicator (dot/circle) */
        .radio1 .checkmark:after {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #6255a5;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        }
    </style>
}
<!-- Head -->
<section class="head">
    <div class="head-content">
        <div class="container">
            <div class="row">
                <div class="head-content-inner">
                    <div class="head-heading">
                        Edit Notes
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- End Head -->
<!-- Edit Notes  -->
<section class="container">
    <!-- Basic Note Details -->

    @if (ViewBag.Show)
    {
        <div class="alert @ViewBag.AlertClass alert-dismissible fade show m-2" role="alert">
            <strong>@ViewBag.message</strong>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <div class="row heading">
        <div class="col-md-12 p-0">
            <h1 class="title">Basic Note Details</h1>
        </div>
    </div>
    @using (Html.BeginForm("EditNote", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.SellerNotesID)
        @Html.HiddenFor(model => model.DisplayPicture)
        @Html.HiddenFor(model => model.FilePath)
        @Html.HiddenFor(model => model.NotesPreview)

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, "Title *", new { @for = "inputTitle" })
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control", placeholder = "Enter your notes title", id = "inputTitle" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>

                <label for="file-image">Display Picture</label>
                <div id="file-upload-form" class="uploader form-group">
                    <input id="file-upload" type="file" name="EditNoteDisplayPicturePath" class="form-control" />
                    <label for="file-upload" id="file-drag">
                        <img id="file-image" src="@Url.Content(ViewBag.ProfilePicturePreview)" alt="Preview" class="@ViewBag.NonHideClass">
                        <div id="start" class="@ViewBag.HideClass">
                            <img src="@Url.Content(ViewBag.ProfilePicture)" height="46" width="50" />
                            <div>Upload a picture</div>
                            <div id="notimage" class="hidden">Please select an image</div>
                        </div>
                        <div id="response" class="@ViewBag.NonHideClass">
                            <div id="messages">@ViewBag.ProfilePictureName</div>
                        </div>
                    </label>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NoteType, "Type", new { @for = "dropdownType" })
                    @Html.DropDownListFor(model => model.NoteType, ViewBag.NotesType as SelectList, "Select Your Note Type", new { @class = "form-control", id = "dropdownType" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Category, "Category *", new { @for = "dropdownCategory" })
                    @Html.DropDownListFor(model => model.Category, ViewBag.NotesCategory as SelectList, "Select Your Note Category", new { @class = "form-control", id = "dropdownCategory" })
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>

                <label for="file-pdf">Upload Notes <span>*</span></label>
                <div id="pdf-upload-form" class="uploader form-group">
                    <input id="pdf-upload" type="file" name="EditNoteUploadFilePath" />
                    <label for="pdf-upload" id="pdf-drag">
                        <img id="file-pdf" src="@Url.Content(ViewBag.UploadNotePreview)" alt="Preview" class="@ViewBag.NonHideClass2">
                        <div id="start2" class="@ViewBag.HideClass2">
                            <img src="@Url.Content(ViewBag.ProfilePicture2)" height="46" width="50" />
                            <div>Upload your notes</div>
                            <div id="notimage2" class="hidden">Please select an PDF</div>
                        </div>
                        <div id="response2" class="@ViewBag.NonHideClass2">
                            <div id="messages2">@ViewBag.ProfilePictureName2</div>
                        </div>
                        @*@Html.ValidationMessageFor(model => model.EditNoteUploadFilePath, "", new { @class = "text-danger" })*@
                    </label>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.NumberOfPages, "Number of Pages", new { @for = "inputNumberofPages", id = "noOfPages" })
                    @Html.TextBoxFor(model => model.NumberOfPages, new { @class = "form-control", placeholder = "Enter number of note pages", id = "inputNumberofPages" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="form-group mb-0 p-0">
                    @Html.LabelFor(model => model.Description, "Description *", new { @for = "description" })
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Enter your description", id = "description" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <!-- Institution Information -->
        <div class="row">
            <div class="col-md-12">
                <h1 class="title" style="margin-top: 40px;">Institution Information</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CountryList, "Country", new { @for = "dropdownCountry" })
                    @Html.DropDownListFor(model => model.Country, ViewBag.NotesCountry as SelectList, "Select Your Country", new { @class = "form-control", id = "dropdownCountry" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.UniversityName, "Institution Name", new { @for = "institutionname" })
                    @Html.TextBoxFor(model => model.UniversityName, new { @class = "form-control", placeholder = "Enter your institution name", id = "institutionname" })
                </div>
            </div>
        </div>

        <!-- Course Details -->
        <div class="row">
            <div class="col-md-12">
                <h1 class="title" style="margin-top: 40px;">Course Details</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Course, "Course Name", new { @for = "coursename" })
                    @Html.TextBoxFor(model => model.Course, new { @class = "form-control", placeholder = "Enter your course name", id = "coursename" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Professor, "Professor / Lecturer", new { @for = "proflecturer" })
                    @Html.TextBoxFor(model => model.Professor, new { @class = "form-control", placeholder = "Enter your professor name", id = "proflecturer" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CourseCode, "Course Code", new { @for = "coursecode" })
                    @Html.TextBoxFor(model => model.CourseCode, new { @class = "form-control", placeholder = "Enter your  course code", id = "coursecode" })
                </div>
            </div>
        </div>

        <!-- Selling Information -->
        <div class="row">
            <div class="col-md-12">
                <h1 class="title" style="margin-top: 40px;">Selling Information</h1>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.IsPaid, "Sell For *")
                <div class="form-group">
                    <div class="contact-inputs">
                        <label class="radio1">
                            @*<input type="radio" checked="checked" name="radio" value="free">*@
                            @Html.RadioButtonFor(model => model.IsPaid, false, new { @name = "IsPaid", @id = "Free", onclick = "EnableDisableTextBox()" })
                            <span class="checkmark"></span>
                            <label class="label-2">Free</label>
                        </label>
                        <label class="radio1">
                            @*<input type="radio" name="radio" value="paid">*@
                            @Html.RadioButtonFor(model => model.IsPaid, true, new { @name = "IsPaid", @id = "Paid", onclick = "EnableDisableTextBox()" })
                            <span class="checkmark"></span>
                            <label class="label-2">Paid</label>
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SellingPrice, "Sell Price", new { @for = "sellPrice" })
                    @Html.TextBoxFor(model => model.SellingPrice, new { @class = "form-control", placeholder = "Enter your price", id = "sellPrice" })
                    @Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <label for="file-preview">Note Preview</label>
                <div id="preview-upload-form" class="uploader form-group">
                    <input id="preview-upload" type="file" name="EditNotePreviewFilePath" />
                    <label for="preview-upload" id="preview-drag" class="customInput">
                        <img id="file-preview" src="@Url.Content(ViewBag.NotePreview)" alt="Preview" class="@ViewBag.NonHideClass3">
                        <div id="start3" class="@ViewBag.HideClass3">
                            <img src="@Url.Content(ViewBag.ProfilePicture3)" height="46" width="50" />
                            <div>Upload a file</div>
                            <div id="notimage3" class="hidden">Please select an image</div>
                        </div>
                        <div id="response3" class="@ViewBag.NonHideClass3">
                            <div id="messages3">@ViewBag.ProfilePictureName3</div>
                        </div>
                    </label>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <button id="btnSubmit" type="submit" class="btn" value="Save" name="command">SUBMIT</button>
            </div>

            <div class="form-group">
                <button id="btnPublish" type="button" data-target="#exampleModal" data-toggle="modal" class="btn" style="margin-left: 30px;">PUBLISH</button>
            </div>
        </div>

        <!-- Published note popup box -->

        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalScrollableTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title" id="exampleModalLabel">Publish Note</h2>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true"><img src="~/Content/images/close.png"></span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Publishing this note will send note to administrator for review.
                            <br /><br />
                            Once administrator review and approve then this note will be published to portal.
                            <br /><br />
                            Press yes to continue.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary exampleClose" data-dismiss="modal">Close</button>
                        <button type="submit" name="Command" value="Publish" class="btn btn-primary exampleYes">Yes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Published note popup box End -->
    }
</section>
<!-- End Edit Notes   -->

@section CustomScript
{
    <script>
        function EnableDisableTextBox() {
            var Paid = document.getElementById("Paid");
            var txtSellPrice = document.getElementById("sellPrice");
            txtSellPrice.disabled = Paid.checked ? false : true;
            if (!txtSellPrice.disabled) {
                txtSellPrice.focus();
            }
        }
    </script>
}